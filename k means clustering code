import pandas as pd

# Load the dataset
data = pd.read_csv('Mall_Customers.csv')

# Display the first few rows
print(data.head())
# Basic information about the dataset
print(data.info())

# Summary statistics
print(data.describe())
# Checking for missing values
print(data.isnull().sum())

# Select relevant features (e.g., Annual Income and Spending Score)
features = data[['Annual Income (k$)', 'Spending Score (1-100)']]

# Normalize the data
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
normalized_data = scaler.fit_transform(features)
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(normalized_data)
    wcss.append(kmeans.inertia_)

plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()
# Fit K-Means with the optimal number of clusters (let's assume it's 5 from the elbow plot)
kmeans = KMeans(n_clusters=5, random_state=42)
clusters = kmeans.fit_predict(normalized_data)

# Add cluster labels to the original data
data['Cluster'] = clusters
# Visualize the clusters
plt.scatter(normalized_data[:, 0], normalized_data[:, 1], c=clusters, cmap='viridis')
plt.title('Customer Segments')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.show()

# Display the mean values of each cluster for each feature
cluster_centers = pd.DataFrame(scaler.inverse_transform(kmeans.cluster_centers_), columns=['Annual Income (k$)', 'Spending Score (1-100)'])
cluster_centers['Cluster'] = range(5)
print(cluster_centers)

# Analyze the number of customers in each cluster
print(data['Cluster'].value_counts())
